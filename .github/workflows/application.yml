name: Deploy Application

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'package.json'
      - 'tsconfig.json'
      - 'host.json'
      - '.github/workflows/application.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'package.json'
      - 'tsconfig.json'
      - 'host.json'
      - '.github/workflows/application.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  NODE_VERSION: '18'

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          # Create deployment artifact
          mkdir -p deploy
          cp -r dist/* deploy/
          cp package.json deploy/
          cp host.json deploy/
          
          # Install production dependencies only
          cd deploy
          npm ci --only=production
          
          # Create zip package
          zip -r ../contact-form-api.zip .
          cd ..

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: contact-form-api
          path: contact-form-api.zip
          retention-days: 30

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: contact-form-api

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Get Function App name
        id: get-app-name
        run: |
          app_name=$(az functionapp list \
            --resource-group rg-contact-form-dev-eus-001 \
            --query '[0].name' \
            --output tsv)
          echo "app-name=$app_name" >> $GITHUB_OUTPUT
          echo "Function App: $app_name"

      - name: Deploy to Azure Functions
        run: |
          az functionapp deployment source config-zip \
            --resource-group rg-contact-form-dev-eus-001 \
            --name ${{ steps.get-app-name.outputs.app-name }} \
            --src contact-form-api.zip

      - name: Verify deployment
        run: |
          app_url="https://${{ steps.get-app-name.outputs.app-name }}.azurewebsites.net"
          echo "Application deployed to: $app_url"
          
          # Wait for deployment to complete
          sleep 30
          
          # Basic health check (if you have a health endpoint)
          # curl -f "$app_url/api/health" || echo "Health check endpoint not available"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: contact-form-api

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Get Function App name
        id: get-app-name
        run: |
          app_name=$(az functionapp list \
            --resource-group rg-contact-form-prod-eus-001 \
            --query '[0].name' \
            --output tsv)
          echo "app-name=$app_name" >> $GITHUB_OUTPUT
          echo "Function App: $app_name"

      - name: Deploy to Azure Functions (Blue-Green)
        run: |
          # Deploy to staging slot first
          az functionapp deployment slot create \
            --resource-group rg-contact-form-prod-eus-001 \
            --name ${{ steps.get-app-name.outputs.app-name }} \
            --slot staging || echo "Staging slot already exists"
          
          # Deploy to staging
          az functionapp deployment source config-zip \
            --resource-group rg-contact-form-prod-eus-001 \
            --name ${{ steps.get-app-name.outputs.app-name }} \
            --slot staging \
            --src contact-form-api.zip
          
          # Wait and perform health checks on staging
          sleep 60
          
          # If health checks pass, swap slots
          az functionapp deployment slot swap \
            --resource-group rg-contact-form-prod-eus-001 \
            --name ${{ steps.get-app-name.outputs.app-name }} \
            --slot staging \
            --target-slot production

      - name: Verify production deployment
        run: |
          app_url="https://${{ steps.get-app-name.outputs.app-name }}.azurewebsites.net"
          echo "âœ… Application deployed to production: $app_url"